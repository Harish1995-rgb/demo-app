{"version":3,"sources":["components/cards/cards.js","components/table/table.js","components/grids/grids.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","getImageData","parameter","myProgress","axios","method","url","then","response","newData","state","imageData","push","data","setState","console","log","photos","comments","albums","todos","title","fun","this","map","value","classes","className","root","Grid","container","spacing","direction","justify","elem","item","xs","sm","md","onClick","callbackFromParent","Card","card","CardHeader","subheader","CardContent","Typography","variant","gutterBottom","length","indexOf","Component","withStyles","theme","flexGrow","padding","backgroundColor","color","Tables","renderRows","recivedData","row","TableRow","rows","Object","values","TableCell","tableData","prevProps","prevState","nextProps","TableContainer","Table","aria-label","TableHead","keys","TableBody","progress","display","filter","index","albumId","align","src","thumbnailUrl","id","boxShadow","App","isDataLoading","myCallback","dataFromChild","listDataFromChild","TableHeader","Fragment","LinearProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4993377.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardHeader\n} from '@material-ui/core/';\nimport { withStyles } from '@material-ui/core/styles'\nimport axios from 'axios';\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n    backgroundColor: '#ff80ab'\n  },\n  card: {\n    backgroundColor: \"secondary\",\n    color: 'blue',\n    '&:hover': {\n      color: '#004d4',\n      'box-shadow': '2px 2px 4px 4px #00b0ff'\n    }\n  },\n  CardHeader: {\n    color: 'red',\n  }\n})\n\nclass Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageData: { photos: [], comments: [], albums: [], todos: [] },\n      // commentData: [],\n      // albumsData: [],\n      // todoData: [],\n      data: [\n        { data: 'Image Information', title: 'JOSN Placeholder', parameter: 'photos', fun: this.getImageData },\n      { data: 'Comments Information', title: 'JOSN Placeholder', parameter: 'comments', fun: this.getImageData },\n      { data: 'Albums Information', title: 'JOSN Placeholder', parameter: 'albums', fun: this.getImageData },\n      { data: 'ToDo Information', title: 'JOSN Placeholder', parameter: 'todos', fun: this.getImageData },\n      ],\n    }\n\n  }\n  getImageData = (parameter) => {\n    this.props.myProgress(true);\n    axios({\n      method: 'get',\n      url: `https://jsonplaceholder.typicode.com/${parameter}`\n    }\n    )\n      .then(response => {\n        let newData = this.state.imageData;\n        newData[parameter] = []\n        newData[parameter].push(...response.data);\n        this.setState({\n          imageData: newData,\n        }\n\n        // ,()=>{\n        //   this.props.callbackFromParent(response.data) //passing data to parent component by callBackFunction\n        // }\n        )\n    this.props.myProgress(false);\n\n        console.log(\"Image Data\",this.state.imageData);\n      }\n      );\n  }\n\n  // getCommentData = () => {\n  //   axios({\n  //     method: 'get',\n  //     url: 'https://jsonplaceholder.typicode.com/comments'\n  //   }\n  //   )\n  //     .then(response => {\n  //       this.setState({\n  //         commentData: response.data,\n  //       }\n  //       )\n  //     }\n  //     );\n  // }\n\n  // getAlbumsData = () => {\n  //   axios({\n  //     method: 'get',\n  //     url: 'https://jsonplaceholder.typicode.com/albums'\n  //   }\n  //   )\n  //     .then(response => {\n  //       this.setState({\n  //         albumsData: response.data,\n  //       }\n  //       )\n  //     }\n  //     );\n  // }\n\n  // getToDoData = () => {\n  //   axios({\n  //     method: 'get',\n  //     url: 'https://jsonplaceholder.typicode.com/todos'\n  //   }\n  //   )\n  //     .then(response => {\n  //       this.setState({\n  //         todoData: response.data,\n  //       }\n  //       )\n  //     }\n  //     );\n  // }\n\n\n  componentDidMount() {\n    {this.state.data.map(value => \n      this.getImageData(value.parameter));}\n    // this.getCommentData();\n    // this.getAlbumsData();\n    // this.getToDoData();\n  }\n\n  render() {\n    const { imageData,  data } = this.state;\n    const { classes } = this.props;\n    // debugger\n\n\n    return (\n      <div className={classes.root} >\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"flex-start\"\n          fun={this.state}\n        >\n          {data.map(elem => (\n            <Grid item xs={12} sm={6} md={3} key={data.indexOf(elem)} \n            onClick={() => elem.fun(elem.parameter)} \n            onClick={() => this.props.callbackFromParent(this.state.imageData[elem.parameter])}\n            >\n              <Card className={classes.card}>\n                <CardHeader\n                  title={elem.data}\n                  subheader={elem.title}\n                />\n                <CardContent>\n                  <Typography variant=\"h3\" gutterBottom >\n                    {imageData[elem.parameter].length}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(Cards);","import React, { Component } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n  root:{\n    backgroundColor:'#f3e5f5',\n  },\n  rows:{\n    color:'white',\n    '&:hover':{\n      'box-shadow':'2px 2px 2px 2px #2979ff'\n    }\n  },\n  progress:{\n    display:'fixed'\n  }\n})\n\nclass Tables extends Component{\n    constructor(props){\n      super(props);\n      this.state={\n        recivedData:props.tableData,\n      }\n    }\n    componentDidUpdate(){\n      \n    }\n  //   getData = () => {\n  //     axios({\n  //         method: 'get',\n  //         url: 'https://jsonplaceholder.typicode.com/users'\n  //     }\n  //     )\n  //         .then(response => {\n  //             this.setState({\n  //               recivedData: response.data\n  //             }\n  //             )\n  //              console.log(this.state.recivedData)\n  //         }\n  //         );\n  // }\n\n\n  UNSAFE_componentWillReceiveProps(nextProps){\n    if(nextProps.tableData!=this.state.tableData  ){\n      this.setState({\n        recivedData:nextProps.tableData,\n      })\n  }\n}\n  \n  \n\n    componentDidMount() {\n      \n    }\n  componentDidUpdate(prevProps,prevState){\n      //  this.props.myProgress();\n    \n  }\n\n    componentWillUnmount() {\n      console.log('will mount')\n  \n    }\n    renderRows=()=>{\n      const {recivedData}=this.state;\n      const {classes}=this.props; \n      return recivedData && recivedData.map(row => (\n      <TableRow className = { classes.rows }>\n         {Object.values(row).map(elem => <TableCell>{ elem }</TableCell>)}\n      </TableRow>\n    ))\n  }\n    render(){\n        const {recivedData}=this.state;\n        // debugger\n        const {classes} = this.props;\n        // debugger\n      return(\n        \n        <TableContainer className= { classes.root }>\n\n        <Table aria-label=\"simple table\">\n       \n\n          <TableHead>\n         \n              <TableRow className = { classes.rows }>\n            { \n            recivedData[0] && Object.keys(recivedData[0]).map(elem => ( \n\n                <TableCell>{ elem }</TableCell>\n             ))}\n\n            </TableRow>\n\n            {/* <TableRow className = { classes.rows }>\n            <TableCell>User Id</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>User Name</TableCell>\n            <TableCell>Phone</TableCell>\n            <TableCell>City</TableCell>\n            <TableCell>Zipcode</TableCell>\n            <TableCell>Website</TableCell>\n            </TableRow> */}\n          </TableHead>\n         \n\n          <TableBody >\n            {this.renderRows()}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      );\n    }\n  }\n  export default withStyles(styles) (Tables);","import React, { Component } from 'react';\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardHeader\n} from '@material-ui/core/';\nimport { withStyles } from '@material-ui/core/styles'\nimport axios from 'axios';\n\nconst styles = theme => ({\n  root:{\n    backgroundColor:'#84ffff',\n  },\n  card:{\n    color:'#00695c',\n    '&:hover':{\n      boxShadow:'2px 2px 4px 4px gray'\n    }\n  }\n})\n\nclass Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageData: [],\n    }\n\n  }\n  getImageData = () => {\n    axios({\n      method: 'get',\n      url: 'https://jsonplaceholder.typicode.com/photos'\n    }\n    )\n      .then(response => {\n        this.setState({\n          imageData: response.data\n        }\n        )\n      }\n      );\n  }\n\n  componentDidMount() {\n    this.getImageData();\n  }\n\n  render() {\n    const { imageData} = this.state;\n    const { classes } =this.props;\n\n    return (\n\n      <div >\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"flex-start\"\n          className = { classes.root }\n        >\n          {imageData.filter((elem, index) => index < 24).map((elem)=>{\n              \n            return <Grid item xs={12} sm={6} md={2} key={imageData.indexOf(elem)}>\n              <Card className = { classes.card }>\n                <CardHeader \n                subheader={\"Alumb id: \" + elem.albumId}/>\n                <CardContent align='center'>\n                 <img src={elem.thumbnailUrl}/>\n                </CardContent>\n                <Typography  gutterBottom align=\"center\">\n                  Image id { elem.id }\n                </Typography>\n              </Card>\n            </Grid>\n            \n          })}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles) (Cards);","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/cards/cards';\nimport Table from './components/table/table';\nimport Grid from './components/grids/grids'\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n          this.state = {\n            isDataLoading:false,\n            listDataFromChild: [{TableHeader:'TableData'}]\n    };    \n}\n\nmyProgress = (state) =>{\n  if(this.state.isDataLoading!=false)\n  this.setState({\n    isDataLoading:state\n  })\n}\n    myCallback = (dataFromChild) => {   //callBackFunction\n      \n    this.setState({ listDataFromChild: dataFromChild, isDataLoading:true });\n    console.log(Object.keys(dataFromChild))\n}\n\n  render() {\n    return (\n      <React.Fragment>\n        <Card callbackFromParent={this.myCallback} myProgress={this.myProgress}/>\n        {this.state.isDataLoading&&<LinearProgress/>}\n        <Table tableData={this.state.listDataFromChild} myProgress={this.myProgress}/>\n        <Grid />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}